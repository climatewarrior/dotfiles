#+TITLE: My Emacs configuration file
* General customizations
** Add extra modules to load path
#+BEGIN_SRC emacs-lisp
; Add extra emacs modules to load path
; http://stackoverflow.com/questions/221365/emacs-lisp-how-to-add-a-folder-and-all-its-first-level-sub-folders-to-the-load
(let ((base "~/.emacs.d/elisp"))
  (add-to-list 'load-path base)
  (dolist (f (directory-files base))
    (let ((name (concat base "/" f)))
      (when (and (file-directory-p name) 
                 (not (equal f ".."))
                 (not (equal f ".")))
        (add-to-list 'load-path name)))))
#+end_src

** Setup save dir
#+begin_src emacs-lisp
(defvar prelude-dir (file-name-directory load-file-name)
  "The root dir of the Emacs Prelude distribution.")

(defvar prelude-savefile-dir (expand-file-name "savefile" prelude-dir)
  "This folder stores all the automaticaXSlly generated save/history-files.")

(unless (file-exists-p prelude-savefile-dir)
  (make-directory prelude-savefile-dir))
#+end_src
** ELPA
- Activate repo
#+BEGIN_SRC emacs-lisp
; Activate ELPA
(require 'package)
(package-initialize)
#+END_SRC#
- Add Marmalade repo
#+begin_src emacs-lisp
; Add Marmalade repo
(add-to-list 'package-archives
           '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src

** Appearance
*** Setup my theme
#+begin_src emacs-lisp
  ; Setup theme
  ;(load-theme 'tango-dark t)
  (require 'soothe-theme)
  (load-theme 'soothe t)
#+end_src
*** Remove scrollbar
#+begin_src emacs-lisp
; Remove scrollbar
; http://emacs-fu.blogspot.com/2009/12/scrolling.html
(set-scroll-bar-mode nil)
#+end_src
*** Remove toolbar
#+begin_src emacs-lisp
; Remove the toolbar
; http://superuser.com/questions/127420/how-can-i-hide-the-tool-bar-in-emacs-persistently
(tool-bar-mode -1)
#+end_src
*** Add line number display
#+begin_src emacs-lisp
; Enable line number display
(global-linum-mode t)
#+end_src
** Automatically revert buffers

#+begin_src emacs-lisp
; Automatically revert buffers
(global-auto-revert-mode 1)

#+end_src

** Sane copy and paste
#+begin_src emacs-lisp
; Sane copy and paste
; http://www.emacswiki.org/emacs/CopyAndPaste
(global-set-key [(shift delete)] 'clipboard-kill-region)
(global-set-key [(control insert)] 'clipboard-kill-ring-save)
(global-set-key [(shift insert)] 'clipboard-yank)
#+end_src

** Activate auto-complete globally
#+begin_src emacs-lisp
(require 'auto-complete)
(global-auto-complete-mode t)
#+end_src

** [[http://www.emacswiki.org/emacs/ElectricPair][Electric Pair Mode]]
#+begin_src emacs-lisp
;; smart pairing for all
(electric-pair-mode t)
#+end_src
** Save place
#+begin_src 
;; saveplace remembers your location in a file when saving files
(require 'saveplace)
(setq save-place-file (expand-file-name "saveplace" prelude-savefile-dir))
;; activate it for all buffers
(setq-default save-place t)
#+end_src 
** Save recent files
#+begin_src emacs-lisp
;; save recent files
(require 'recentf)
(setq recentf-save-file (expand-file-name "recentf" prelude-savefile-dir)
      recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode +1)
#+end_src
** Windmove
#+begin_src emacs-lisp
;; use shift + arrow keys to switch between visible buffers
(require 'windmove)
(windmove-default-keybindings)
#+end_src
** Show Paren Mode
#+begin_src emacs-lisp
;; show-paren-mode: subtle highlighting of matching parens (global-mode)
(require 'paren)
(setq show-paren-style 'parenthesis)
(show-paren-mode +1)
#+end_src
** Midnight
#+begin_src emacs-lisp
;; clean up obsolete buffers automatically
(require 'midnight)
#+end_src
* Activate modules
** Setup auto-fill-mode
#+begin_src emacs-lisp
; Setup key for auto-fill-mode
; http://www.emacswiki.org/emacs/AutoFillMode    
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+end_src
 Activate packages
** IDO
- Activate
#+BEGIN_SRC emacs-lisp
  ; Activate IDO
  (require 'ido)
  (require 'ido-ubiquitous) 
  (ido-mode t) 
  (ido-ubiquitous-mode 1)
 
#+end_src
- Use IDO for both buffer and file completion and ido-everywhere to t
#+begin_src emacs-lisp
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
#+end_src
** Helm
#+begin_src emacs-lisp
;(require 'helm-config)
;(global-set-key (kbd "C-c h") 'helm-mini)
;(helm-mode 1)
#+end_src
** [[http://www.emacswiki.org/emacs/MiniMap][Minimap]]
#+begin_src emacs-lisp
; Activate minimap
; http://www.emacswiki.org/emacs/MiniMap
(require 'minimap)
#+end_src

** [[ https://github.com/rooney/zencoding][Zencoding]]
#+begin_src emacs-lisp
; Activate zencoding
; https://github.com/rooney/zencoding
(require 'zencoding-mode)
;(add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes
#+end_src
** [[http://www.emacswiki.org/emacs/LoremIpsum][Lorem Ipsum]]
#+begin_src emacs-lisp
; Activate lorem-ipsum
; http://www.emacswiki.org/emacs/LoremIpsum
(require 'lorem-ipsum)
#+end_src

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]
#+begin_src emacs-lisp
; Activate Multiple Cursors
; https://github.com/magnars/multiple-cursors.el
(require 'multiple-cursors) 
; Setup keybindings for multiple-cursors
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

** [[https://github.com/ananthakumaran/monky][Monky]]
#+begin_src emacs-lisp
; Mercurial mode a la maggit
; https://github.com/ananthakumaran/monky
(require 'monky)
(setq monky-process-type 'cmdserver)
#+end_src
** [[http://philjackson.github.com/magit/][Magit]]
#+begin_src emacs-lisp 
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src
** Pomodoro
#+begin_src emacs-lisp
; Enable pomodoro.el
; https://github.com/docgnome/pomodoro.el
(require 'pomodoro)
#+end_src

** [[https://github.com/tlh/workgroups.el][Workgroups]]
#+begin_src emacs-lisp
; Activate workgroups
; https://github.com/tlh/workgroups.el
(require 'workgroups)
(workgroups-mode 1)
(wg-load "~/.emacs.d/workgroups")
#+end_src

** [[https://github.com/lunaryorn/flycheck/blob/master/README.md][Flycheck]]
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'flycheck-mode)
  (add-hook 'text-mode-hook 'flycheck-mode)
#+end_src
** Undo-Tree
#+begin_src emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+end_src
** [[http://emacs-fu.blogspot.com/2009/11/making-buffer-names-unique.html][Uniquify]]
#+begin_src emacs-lisp
(require 'uniquify) 
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+end_src

** [[http://web-mode.org/][WebMode]]
#+begin_src emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

* Session management
#+begin_src emacs-lisp
(defvar my-desktop-session-dir
  (concat (getenv "HOME") "/.emacs.d/desktop-sessions/")
  "*Directory to save desktop sessions in")

(defvar my-desktop-session-name-hist nil
  "Desktop session name history")

; Desktop session management
; http://scottfrazersblog.blogspot.com/2009/12/emacs-named-desktop-sessions.html
(require 'desktop)

(defun my-desktop-save (&optional name)
  "Save desktop by name."
  (interactive)
  (unless name
    (setq name (my-desktop-get-session-name "Save session" t)))
  (when name
    (make-directory (concat my-desktop-session-dir name) t)
    (desktop-save (concat my-desktop-session-dir name) t)))

(defun my-desktop-save-and-clear ()
  "Save and clear desktop."
  (interactive)
  (call-interactively 'my-desktop-save)
  (desktop-clear)
  (setq desktop-dirname nil))

(defun my-desktop-read (&optional name)
  "Read desktop by name."
  (interactive)
  (unless name
    (setq name (my-desktop-get-session-name "Load session")))
  (when name
    (desktop-clear)
    (desktop-read (concat my-desktop-session-dir name))))

(defun my-desktop-change (&optional name)
  "Change desktops by name."
  (interactive)
  (let ((name (my-desktop-get-current-name)))
    (when name
      (my-desktop-save name))
    (call-interactively 'my-desktop-read)))

(defun my-desktop-name ()
  "Return the current desktop name."
  (interactive)
  (let ((name (my-desktop-get-current-name)))
    (if name
        (message (concat "Desktop name: " name))
      (message "No named desktop loaded"))))

(defun my-desktop-get-current-name ()
  "Get the current desktop name."
  (when desktop-dirname
    (let ((dirname (substring desktop-dirname 0 -1)))
      (when (string= (file-name-directory dirname) my-desktop-session-dir)
        (file-name-nondirectory dirname)))))

(defun my-desktop-get-session-name (prompt &optional use-default)
  "Get a session name."
  (let* ((default (and use-default (my-desktop-get-current-name)))
         (full-prompt (concat prompt (if default
                                         (concat " (default " default "): ")
                                       ": "))))
    (completing-read full-prompt (and (file-exists-p my-desktop-session-dir)
                                      (directory-files my-desktop-session-dir))
                     nil nil nil my-desktop-session-name-hist default)))

(defun my-desktop-kill-emacs-hook ()
  "Save desktop before killing emacs."
  (when (file-exists-p (concat my-desktop-session-dir "last-session"))
    (setq desktop-file-modtime
          (nth 5 (file-attributes (desktop-full-file-name (concat my-desktop-session-dir "last-session"))))))
  (my-desktop-save "last-session"))

(add-hook 'kill-emacs-hook 'my-desktop-kill-emacs-hook)
#+end_src

* Arduino setup
#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
#+end_src
* Python setup 
#+begin_src emacs-lisp
; Python stuff
; http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial
;(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;(add-to-list 'interpreter-mode-alist '("python" . python-mode))
;(require 'python-mode)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)
#+end_src

* Org-mode setup
** General configuration
#+begin_src emacs-lisp
;; Set to the location of your Org files on your local system
(setq org-directory "~/Ubuntu One/org")

; Set agenda files
(setq org-agenda-files (file-expand-wildcards "~/Ubuntu One/org/*.org"))

; Set file for capture mode
(setq org-default-notes-file "~/Ubuntu One/org/capture.org")

;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Ubuntu One/org/flagged.org")

;; Setup the mobile directory
(setq org-mobile-directory "~/Ubuntu One/MobileOrg")

; Capture key
(define-key global-map "\C-cc" 'org-capture)

; Org-mode key maps
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
#+end_src

** Activate extra stuff
- Activate org-bullets
#+begin_src emacs-lisp
; Activate org-bullets
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
- Acticate org-protocol
#+begin_src emacs-lisp
; Activate org protocol
; http://orgmode.org/worg/org-contrib/org-protocol.html
(require 'org-protocol)
#+end_src
** Customizations
- Capture templates
#+begin_src emacs-lisp
; Capture templates
; http://orgmode.org/worg/org-contrib/org-protocol.html#sec-6-1-1
(setq org-capture-templates
      (quote
       (("i"
         "Internet"
         entry
         (file+headline "~/Ubuntu One/org/capture.org" "Notes")
         "* %^{Title} %u, %c\n\n  %i"
         :empty-lines 1)
         
         ("t" 
          "TODO"
	  entry
	  (file+headline "~/Ubuntu One/org/migtd.org" "Entrando")
          "* TODO %^{Brief Description} %^g\n%?\nAdded: %U" )

         ("w" 
          "WAITING"
	  entry
	  (file+headline "~/Ubuntu One/org/migtd.org" "Esperando")
          "* WAITING %^{Brief Description} %^g\n%?\nAdded: %U" )

         ("d" 
          "diario"
	  entry
	  (file+headline "~/Ubuntu One/org/diario.org" "Entradas")
          "* %^{Title} \nAdded: %U" )
        ;; ... more templates here ...

        )))

 #+end_src
- Setup tags
 #+begin_src emacs-lisp
   ; Set tags
(setq org-tag-alist 
'(("@apartamento" . ?a) 
("@carro" . ?v) 
("@universidad" . ?u) 
("@downtown" . ?d) 
("@san juan" . ?s)
("@casa" . ?m) 
("@pensar" . ?p) 
("computadora" . ?c) 
("iPad" . ?i) 
("email" . ?e) 
("telefono" . ?t)))
 #+end_src
- Setup To-do keywords
#+begin_src emacs-lisp
; Set to-do keywords
(setq org-todo-keywords
       '((sequence "TODO(t)" "WAITING(w@/!)" "STARTED(s)" "|" "DONE(d!)" "CANCELED(c@)")))
#+end_src
- Refiling
#+begin_src emacs-lisp
;Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Stop using paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

#+end_src

- IDO integration
#+begin_src emacs-lisp
   ; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
#+end_src
** Fix for PDFs
#+begin_src emacs-lisp
;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+end_src

** Auto sync stuff
#+BEGIN_SRC emacs-lisp
  ; Auto org-mobile push https://gist.github.com/mrvdb/3111823/download#
  ;; Show a notification when a push has been completed
  ;; (require 'notifications)
  ;; (defun notify-push (result)
  ;;   (notifications-notify
  ;;    :title "Push complete"
  ;;    :body  (format "Org-mobile-push: %s" result)
  ;;   )
  ;; )
  
  ;; ;; Fork the work of pushing to mobile
  ;; (require 'async) 
  ;; (defun fork-org-push-mobile ()
  ;;   (async-start
  ;;    ;; What to do in the child process
  ;;    `(lambda ()
  ;;       ,(async-inject-variables "org-\\(mobile-\\|directory\\)")
  ;;       (org-mobile-push))
     
  ;;    ; What to do when it finishes
  ;;    (lambda (result)
  ;;      (notify-push result))))
  
  ;; ;; Define a timer variable
  ;; (defvar org-mobile-push-timer nil
  ;;   "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")
  
  ;; ;; Push to mobile when the idle timer runs out
  ;; (defun org-mobile-push-with-delay (secs)
  ;;   (when org-mobile-push-timer
  ;;     (cancel-timer org-mobile-push-timer))
  ;;   (setq org-mobile-push-timer
  ;;         (run-with-idle-timer
  ;;          (* 1 secs) nil 'fork-org-push-mobile)))
  
  ;; After saving files, start a 30 seconds idle timer after which we
  ;; are going to push
  ;; (add-hook 'after-save-hook
  ;; (lambda ()
  ;; (when (eq major-mode 'org-mode)
  ;; (dolist (file (org-mobile-files-alist))
  ;; (if (string= (expand-file-name (car file)) (buffer-file-name))
  ;; (org-mobile-push-with-delay 30)))
  ;; )))
   
  ;; At least run it once a day, but no need for a delay this time
  ;; (run-at-time "00:05" 86400 '(lambda () (org-mobile-push-with-delay 1))) 
  
#+END_SRC
* Custom set variables
#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("21d9280256d9d3cf79cbcf62c3e7f3f243209e6251b215aede5026e0c5ad853f" default)))
 '(org-agenda-files (quote ("~/Ubuntu One/org/algundia.org" "~/Ubuntu One/org/capture.org" "~/Ubuntu One/org/diario.org" "~/Ubuntu One/org/flagged.org" "~/Ubuntu One/org/habitos.org" "~/Ubuntu One/org/libreta.org" "~/Ubuntu One/org/migtd.org" "~/Ubuntu One/org/recordatorios.org"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src


